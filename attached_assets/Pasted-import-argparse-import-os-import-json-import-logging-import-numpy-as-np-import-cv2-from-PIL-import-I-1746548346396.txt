import argparse
import os
import json
import logging
import numpy as np
import cv2
from PIL import Image
from scipy.stats import chisquare
from skimage.measure import shannon_entropy
import matplotlib.pyplot as plt
import io

logging.basicConfig(level=logging.INFO)

SUPPORTED_FORMATS = [
    '.jpg', '.jpeg', '.png', '.gif', '.webp',
    '.bmp', '.tiff', '.tif', '.ico', '.heic',
    '.heif', '.svg', '.avif'
]

LOSSY_FORMATS = ['.jpg', '.jpeg', '.webp', '.heic', '.heif', '.avif']


def load_image_safe(image_path: str) -> np.ndarray:
    ext = os.path.splitext(image_path)[-1].lower()
    if ext not in SUPPORTED_FORMATS:
        raise ValueError(f"Unsupported file extension: {ext}")
    try:
        if ext in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif', '.webp']:
            img = cv2.imread(image_path)
        elif ext in ['.gif', '.ico']:
            pil = Image.open(image_path).convert('RGB')
            img = cv2.cvtColor(np.array(pil), cv2.COLOR_RGB2BGR)
        elif ext in ['.heic', '.heif']:
            import pyheif
            heif_file = pyheif.read(image_path)
            img = Image.frombytes(
                heif_file.mode, heif_file.size, heif_file.data, "raw", heif_file.mode
            )
            img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        elif ext == '.svg':
            import cairosvg
            png_bytes = cairosvg.svg2png(url=image_path)
            pil = Image.open(io.BytesIO(png_bytes)).convert('RGB')
            img = cv2.cvtColor(np.array(pil), cv2.COLOR_RGB2BGR)
        elif ext == '.avif':
            pil = Image.open(image_path).convert('RGB')
            img = cv2.cvtColor(np.array(pil), cv2.COLOR_RGB2BGR)
        else:
            raise ValueError("Unsupported format for decoding.")
        return img
    except Exception as e:
        raise RuntimeError(f"Failed to load image ({ext}): {e}")


def extract_lsb_plane(image: np.ndarray) -> np.ndarray:
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray & 1


def chi_square_test(lsb_plane: np.ndarray):
    flat = lsb_plane.flatten()
    values, counts = np.unique(flat, return_counts=True)
    expected = [len(flat) / 2] * 2
    chi, p = chisquare(counts, f_exp=expected)
    return chi, p


def rs_analysis(gray: np.ndarray):
    def mask_flip(block, mask):
        return block ^ mask

    mask = np.array([[0, 0], [0, 1]])
    rows, cols = gray.shape
    total, regular, singular = 0, 0, 0
    for i in range(0, rows - 1, 2):
        for j in range(0, cols - 1, 2):
            block = gray[i:i+2, j:j+2]
            if block.shape != (2, 2):
                continue
            flipped = mask_flip(block, mask)
            orig_var = np.var(block)
            flip_var = np.var(flipped)
            if flip_var > orig_var:
                regular += 1
            elif flip_var < orig_var:
                singular += 1
            total += 1
    return regular / total, singular / total


def image_entropy(image: np.ndarray) -> float:
    return shannon_entropy(image)


def histogram_slope_analysis(gray: np.ndarray):
    hist = cv2.calcHist([gray], [0], None, [256], [0, 256]).flatten()
    diffs = np.diff(hist)
    slope_changes = np.sum(np.abs(np.diff(np.sign(diffs))))
    return slope_changes


def composite_score(chi_p, entropy, rs_reg, rs_sing, slope_changes):
    score = 0
    if chi_p < 0.05:
        score += 1
    if entropy > 0.9:
        score += 1
    if abs(rs_reg - rs_sing) < 0.05:
        score += 1
    if slope_changes > 100:
        score += 1
    return score >= 3


def analyze_image(image_path: str, visualize=False) -> dict:
    ext = os.path.splitext(image_path)[-1].lower()
    img = load_image_safe(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    lsb = extract_lsb_plane(img)

    chi_val, chi_p = chi_square_test(lsb)
    entropy_val = image_entropy(lsb)
    rs_reg, rs_sing = rs_analysis(gray)
    slope = histogram_slope_analysis(gray)

    if visualize:
        visualize_bit_planes(img)

    suspicious = composite_score(chi_p, entropy_val, rs_reg, rs_sing, slope)
    notes = []
    if ext in LOSSY_FORMATS:
        notes.append("⚠️ Lossy format; LSB may not survive compression reliably.")

    return {
        "image": image_path,
        "format": ext,
        "chi_square_p": round(chi_p, 5),
        "lsb_entropy": round(entropy_val, 4),
        "rs_regular": round(rs_reg, 4),
        "rs_singular": round(rs_sing, 4),
        "histogram_slope_changes": slope,
        "suspicious": suspicious,
        "message": "⚠️ LSB Steganography Detected." if suspicious else "✅ Clean - No suspicious indicators.",
        "format_notes": notes
    }


def visualize_bit_planes(image: np.ndarray):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    fig, axs = plt.subplots(1, 8, figsize=(20, 3))
    for i in range(8):
        plane = ((gray >> i) & 1) * 255
        axs[i].imshow(plane, cmap='gray')
        axs[i].set_title(f'Bit {i}')
        axs[i].axis('off')
    plt.tight_layout()
    plt.show()


def main():
    parser = argparse.ArgumentParser(description="Advanced LSB Steganography Detector")
    parser.add_argument("image", help="Path to the image file")
    parser.add_argument("--visualize", action="store_true", help="Visualize bit planes")
    parser.add_argument("--json", action="store_true", help="JSON output")
    args = parser.parse_args()

    try:
        result = analyze_image(args.image, visualize=args.visualize)
        print(json.dumps(result, indent=2) if args.json else result)
    except Exception as e:
        logging.error(f"Failed to process: {e}")
        exit(1)


if __name__ == "__main__":
    main()
